%keyword KEYWORD_CONST    const
%keyword KEYWORD_INT      int
%keyword KEYWORD_FLOAT    float
%keyword KEYWORD_VOID     void
%keyword KEYWORD_IF       if
%keyword KEYWORD_ELSE     else
%keyword KEYWORD_WHILE    while
%keyword KEYWORD_CONTINUE continue
%keyword KEYWORD_BREAK    break
%keyword KEYWORD_RETURN   return

%token KEYWORD_INT_FUNC   int/[ \t]*[_a-zA-z0-9]+\(
%token KEYWORD_FLOAT_FUNC float/[ \t]*[_a-zA-z0-9]+\(

%token SEMICOLON   \;
%token COMMA       \,
%token EQUAL       \=
%token LBRACKET    \[
%token RBRACKET    \]
%token LBRACE      \{
%token RBRACE      \}
%token LPARE       \(
%token RPARE       \)

%token OPE_NOT     \!
%token OPE_ADD     \+
%token OPE_SUB     \-
%token OPE_MUL     \*
%token OPE_DIV     \/
%token OPE_MOD     \%
%token OPE_AND     "&&"
%token OPE_OR      "||"
%token OPE_EQU     "=="
%token OPE_NEQ     "!="
%token OPE_LEQ     "<="
%token OPE_GEQ     ">="
%token OPE_LSS     "<"
%token OPE_GTR     ">"

%token INT_CONST   [0-9][0-9]*
%token FLOAT_CONST [0-9][0-9]*\.[0-9]*

%syntax CompUnit       := CompUnitDef
%syntax CompUnit       := CompUnit CompUnitDef
%syntax CompUnitDef    := Decl
%syntax CompUnitDef    := FuncDef
%syntax Decl           := ConstDecl
%syntax Decl           := VarDecl
%syntax ConstDecl      := KEYWORD_CONST BType ConstDefList SEMICOLON
%syntax BType          := KEYWORD_INT
%syntax BType          := KEYWORD_FLOAT
%syntax ConstDefList   := ConstDef
%syntax ConstDefList   := ConstDefList COMMA ConstDef
%syntax ConstDef       := IDENTIFIER ArrayIndexList EQUAL InitVal
%syntax ArrayIndexList := 
%syntax ArrayIndexList := ArrayIndexList LBRACKET Exp RBRACKET
%syntax InitVal        := Exp
%syntax InitVal        := LBRACE InitValList RBRACE
%syntax InitValList    := InitVal
%syntax InitValList    := InitValList COMMA InitVal
%syntax VarDecl        := BType VarDefList SEMICOLON
%syntax VarDefList     := VarDef
%syntax VarDefList     := VarDefList COMMA VarDef
%syntax VarDef         := IDENTIFIER ArrayIndexList
%syntax VarDef         := IDENTIFIER ArrayIndexList EQUAL InitVal
%syntax FuncDef        := FuncType IDENTIFIER LPARE             RPARE Block
%syntax FuncDef        := FuncType IDENTIFIER LPARE FuncFParams RPARE Block 
%syntax FuncType       := KEYWORD_VOID
%syntax FuncType       := KEYWORD_INT_FUNC
%syntax FuncType       := KEYWORD_FLOAT_FUNC
%syntax FuncFParams    := FuncFParam
%syntax FuncFParams    := FuncFParams COMMA FuncFParam
%syntax FuncFParam     := BType IDENTIFIER FuncFParamArrayIndexList
%syntax FuncFParamArrayIndexList := LBRACKET RBRACKET
%syntax FuncFParamArrayIndexList := FuncFParamArrayIndexList LBRACKET Exp RBRACKET
%syntax Block          := LBRACE BlockItemList RBRACE
%syntax BlockItemList  := 
%syntax BlockItemList  := BlockItemList BlockItem
%syntax BlockItem      := Decl
%syntax BlockItem      := Stmt

%syntax Stmt           := NonIfStmt
%syntax Stmt           := IfStmt
%syntax IfStmt         := KEYWORD_IF LPARE Cond RPARE Stmt
%syntax IfStmt         := KEYWORD_IF LPARE Cond RPARE NonIfStmt KEYWORD_ELSE Stmt

%syntax NonIfStmt      := LVal EQUAL Exp SEMICOLON
%syntax NonIfStmt      := Block
%syntax NonIfStmt      := KEYWORD_WHILE        LPARE Cond RPARE Stmt
%syntax NonIfStmt      := KEYWORD_BREAK        SEMICOLON
%syntax NonIfStmt      := KEYWORD_CONTINUE     SEMICOLON
%syntax NonIfStmt      := KEYWORD_RETURN       SEMICOLON
%syntax NonIfStmt      := KEYWORD_RETURN   Exp SEMICOLON

%syntax Exp            := AddExp
%syntax Cond           := LOrExp
%syntax LVal           := IDENTIFIER ArrayIndexList
%syntax PrimaryExp     := LPARE Exp RPARE
%syntax PrimaryExp     := LVal
%syntax PrimaryExp     := Number
%syntax Number         := INT_CONST
%syntax Number         := FLOAT_CONST
%syntax UnaryExp       := PrimaryExp
%syntax UnaryExp       := IDENTIFIER LPARE             RPARE
%syntax UnaryExp       := IDENTIFIER LPARE FuncRPAREms RPARE
%syntax UnaryExp       := UnaryOp    UnaryExp
%syntax UnaryOp        := OPE_ADD
%syntax UnaryOp        := OPE_SUB
%syntax UnaryOp        := OPE_NOT
%syntax FuncRPAREms    := Exp
%syntax FuncRPAREms    := FuncRPAREms COMMA Exp
%syntax MulExp         := UnaryExp
%syntax MulExp         := MulExp MulOp UnaryExp
%syntax MulOp          := OPE_MUL
%syntax MulOp          := OPE_DIV
%syntax MulOp          := OPE_MOD
%syntax AddExp         := MulExp
%syntax AddExp         := AddExp AddOp MulExp
%syntax AddOp          := OPE_ADD
%syntax AddOp          := OPE_SUB
%syntax RelExp         := AddExp
%syntax RelExp         := RelExp RelOp AddExp
%syntax RelOp          := OPE_LSS
%syntax RelOp          := OPE_LEQ
%syntax RelOp          := OPE_GTR
%syntax RelOp          := OPE_GEQ
%syntax EqExp          := RelExp
%syntax EqExp          := EqExp EqOp RelExp
%syntax EqOp           := OPE_EQU
%syntax EqOp           := OPE_NEQ
%syntax LAndExp        := EqExp
%syntax LAndExp        := LAndExp OPE_AND EqExp
%syntax LOrExp         := LAndExp
%syntax LOrExp         := LOrExp OPE_OR LAndExp
